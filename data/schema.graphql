input AddTodoInput {
  text: String!
  clientMutationId: String
}

type AddTodoPayload {
  todoEdge: TodoEdge
  viewer: User
  clientMutationId: String
}

type Mutation {
  addTodo(input: AddTodoInput!): AddTodoPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!

  hasPreviousPage: Boolean!

  startCursor: String

  endCursor: String
}

type Query {
  viewer: User

  node(
    id: ID!
  ): Node
}

type Todo implements Node {
  id: ID!
  text: String
  complete: Boolean
}

type TodoConnection {
  pageInfo: PageInfo!

  edges: [TodoEdge]
}

type TodoEdge {
  node: Todo

  cursor: String!
}

type User implements Node {
  id: ID!
  todos(status: String = "any", after: String, first: Int, before: String, last: Int): TodoConnection
  totalCount: Int
  completedCount: Int
}
